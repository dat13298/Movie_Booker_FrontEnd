const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

export async function fetchGeminiResponse(message) {
    const promptSystem = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi d√πng ƒë·∫∑t v√© xem phim. Nhi·ªám v·ª• c·ªßa b·∫°n l√† **ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng** v√† **tr·∫£ v·ªÅ m·ªôt JSON h·ª£p l·ªá** v·ªõi c·∫•u tr√∫c sau:

{
  "intent": "booking" | "showing_list" | "other",
  "movie": "t√™n phim ho·∫∑c null n·∫øu kh√¥ng r√µ",
  "reply": "c√¢u tr·∫£ l·ªùi l·ªãch s·ª± d√†nh cho ng∆∞·ªùi d√πng"
}

**Gi·∫£i th√≠ch c√°c intent:**
- N·∫øu ng∆∞·ªùi d√πng mu·ªën **ƒë·∫∑t v√© m·ªôt b·ªô phim c·ª• th·ªÉ** ‚Üí "intent": "booking"
- N·∫øu ng∆∞·ªùi d√πng mu·ªën **xem danh s√°ch phim ƒëang chi·∫øu** ‚Üí "intent": "showing_list"
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ **gi√° v√©, review, m√¥ t·∫£, ch√≠nh s√°ch, ho√†n v√©** ho·∫∑c c√°c v·∫•n ƒë·ªÅ kh√°c ‚Üí "intent": "other"

- ‚ö†Ô∏è N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ **ho√†n v√© ho·∫∑c ho√†n ti·ªÅn**, h√£y tr·∫£ l·ªùi l·ªãch s·ª± r·∫±ng *v√© ƒë√£ mua kh√¥ng th·ªÉ ho√†n tr·∫£ theo ch√≠nh s√°ch c·ªßa r·∫°p*.

‚ö†Ô∏è **Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªëi t∆∞·ª£ng JSON.** Kh√¥ng ƒë∆∞·ª£c vi·∫øt th√™m b·∫•t k·ª≥ m√¥ t·∫£, markdown, hay k√Ω t·ª± th·ª´a n√†o ngo√†i JSON h·ª£p l·ªá.

---

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${message}
`;



    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${import.meta.env.VITE_GEMINI_API_KEY}`;
    const requestBody = {
        contents: [
            {
                role: "user",
                parts: [{ text: promptSystem }],
            },
        ],
    };

    console.log("üì§ Request URL:", url);
    console.log("üì¶ Request Body:", JSON.stringify(requestBody, null, 2));

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            throw new Error(`L·ªói Gemini API: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        console.log("üì• Full Gemini API Response:", result);

        const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!text) throw new Error("Kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ t·ª´ Gemini");

        console.log("üîç Extracted Gemini Text:", text);

        let cleanText = text.trim();
        if (cleanText.startsWith("```json")) {
            cleanText = cleanText.replace(/^```json/, "").replace(/```$/, "").trim();
        }

        const parsed = JSON.parse(cleanText);
        console.log("‚úÖ Parsed JSON Output:", parsed);
        return parsed;
    } catch (error) {
        console.warn("‚ö†Ô∏è Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ Gemini ho·∫∑c l·ªói kh√°c:", error);
        return {
            intent: "other",
            movie: null,
            reply:
                "H·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë ho·∫∑c qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t nh√©!",
        };
    }
}
