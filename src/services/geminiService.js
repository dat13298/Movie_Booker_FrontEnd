const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

export async function fetchGeminiResponse(message) {
    const promptSystem = `
B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi d√πng ƒë·∫∑t v√© xem phim.

Khi nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng, b·∫°n c·∫ßn ph·∫£n h·ªìi m·ªôt ƒë·ªëi t∆∞·ª£ng JSON nh∆∞ sau:

{
  "intent": "booking" | "other",
  "movie": "t√™n phim ho·∫∑c null n·∫øu kh√¥ng r√µ",
  "reply": "ph·∫£n h·ªìi l·ªãch s·ª± d√†nh cho ng∆∞·ªùi d√πng"
}

N·∫øu ng∆∞·ªùi d√πng mu·ªën ƒë·∫∑t v√©, intent l√† "booking".
N·∫øu ch·ªâ h·ªèi v·ªÅ review, th√¥ng tin phim th√¨ intent l√† "other".

Ch·ªâ tr·∫£ v·ªÅ JSON. Kh√¥ng ƒë∆∞·ª£c th√™m m√¥ t·∫£, gi·∫£i th√≠ch ho·∫∑c k√Ω t·ª± d∆∞ th·ª´a.

C√¢u h·ªèi: ${message}
`;

    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;
    const requestBody = {
        contents: [
            {
                role: "user",
                parts: [{ text: promptSystem }],
            },
        ],
    };

    console.log("üì§ Request URL:", url);
    console.log("üì¶ Request Body:", JSON.stringify(requestBody, null, 2));

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestBody),
        });

        const result = await response.json();
        console.log("üì• Full Gemini API Response:", result);

        const text = result?.candidates?.[0]?.content?.parts?.[0]?.text || "";
        console.log("üîç Extracted Gemini Text:", text);

        // L√†m s·∫°ch n·∫øu c√≥ ```json ... ```
        let cleanText = text.trim();
        if (cleanText.startsWith("```json")) {
            cleanText = cleanText.replace(/^```json/, "").replace(/```$/, "").trim();
        }

        const parsed = JSON.parse(cleanText);
        console.log("‚úÖ Parsed JSON Output:", parsed);
        return parsed;
    } catch (error) {
        console.warn("‚ö†Ô∏è Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ Gemini ho·∫∑c l·ªói kh√°c:", error);
        return {
            intent: "other",
            movie: null,
            reply: "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i c·ª• th·ªÉ h∆°n kh√¥ng?",
        };
    }
}
